name: Deploy AWS Academy - EKS - Products Tools API

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore ./Api/Api.csproj

      - name: Build
        run: dotnet build ./Api/Api.csproj --configuration Release

      - name: Run Tests
        run: dotnet test ./Api/Api.csproj --configuration Release

  deploy:
    name: Deploy AWS Academy
    runs-on: ubuntu-latest
    needs: build

    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: AWS Configure
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ vars.REGION_DEFAULT }}

      - name: Build Docker image
        run: |
          docker build -t ${{ vars.DOCKER_REPOSITORY }}:latest -f ./Docker/Dockerfile .

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ vars.REGION_DEFAULT }} | docker login --username AWS --password-stdin ${{ vars.DOCKER_REPOSITORY }}

      - name: Push Docker image to ECR
        run: |
          docker push ${{ vars.DOCKER_REPOSITORY }}:latest
      
      - name: Update Kube Config
        run: aws eks update-kubeconfig --name ${{ vars.CLUSTER_NAME }} --region ${{ vars.REGION_DEFAULT }}

      - name: Apply Kubernetes configurations
        run: |
          kubectl apply -f Kubernetes/wa-productstoolsapi-configmap.yaml
          kubectl apply -f Kubernetes/wa-productstoolsapi-deployment.yaml 
          kubectl apply -f Kubernetes/wa-productstoolsapi-hpa.yaml
          kubectl apply -f Kubernetes/wa-productstoolsapi-pod.yaml
          kubectl apply -f Kubernetes/wa-productstoolsapi-pvc.yaml
          kubectl apply -f Kubernetes/wa-productstoolsapi-service.yaml
